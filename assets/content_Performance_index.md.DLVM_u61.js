import{_ as e,c as a,o as i,a2 as o}from"./chunks/framework.DwDoyBw8.js";const p=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"content/Performance/index.md","filePath":"content/Performance/index.md"}'),l={name:"content/Performance/index.md"},d=o('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="_1-vue渲染大量数据时应该怎么优化" tabindex="-1">1 vue渲染大量数据时应该怎么优化? <a class="header-anchor" href="#_1-vue渲染大量数据时应该怎么优化" aria-label="Permalink to &quot;1 vue渲染大量数据时应该怎么优化?&quot;">​</a></h2><ul><li>添加加载动画loading图等，优化用户体验</li><li>利用服务器渲染SSR，在服务端渲染组件</li><li>避免浏览器处理大量的dom，比如懒加载，异步渲染组件，使用分页</li><li>对于固定的非响应式的数据，使用 <code>Object.freeze</code> 冻结</li></ul><h2 id="_2-网页性能优化" tabindex="-1">2 网页性能优化 <a class="header-anchor" href="#_2-网页性能优化" aria-label="Permalink to &quot;2 网页性能优化&quot;">​</a></h2><h3 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h3><ul><li>客户端控制的 <code>强缓存策略</code></li></ul><h3 id="降低请求成本" tabindex="-1">降低请求成本 <a class="header-anchor" href="#降低请求成本" aria-label="Permalink to &quot;降低请求成本&quot;">​</a></h3><ul><li>HTTP DNS：由客户端控制，隔一段时间主动请求 DNS 获取域名 IP，不走系统的 DNS</li><li>TCP / TLS 连接的复用：由服务端升级到 HTTP2, 尽量合并域名</li></ul><h3 id="减少请求数" tabindex="-1">减少请求数 <a class="header-anchor" href="#减少请求数" aria-label="Permalink to &quot;减少请求数&quot;">​</a></h3><ul><li>JavaScript、CSS 打包到 HTML</li><li>用 JavaScript 控制图片的 <code>异步加载</code> 和 <code>懒加载</code></li><li>小型图片使用 <a href="https://blog.csdn.net/shadow_zed/article/details/93848314" target="_blank" rel="noreferrer">data-uri</a></li></ul><h3 id="减少传输体积" tabindex="-1">减少传输体积 <a class="header-anchor" href="#减少传输体积" aria-label="Permalink to &quot;减少传输体积&quot;">​</a></h3><ul><li>尽量使用 SVG/gradient 等代替图片</li><li>根据机型和网络状况控制图片清晰度</li><li>对低清晰度图片使用锐化(PS)来提升体验</li><li>设计上避免大型背景图</li></ul><h3 id="减少页面体积-提升网络加载" tabindex="-1">减少页面体积，提升网络加载 <a class="header-anchor" href="#减少页面体积-提升网络加载" aria-label="Permalink to &quot;减少页面体积，提升网络加载&quot;">​</a></h3><ul><li>静态资源的压缩合并(JS代码压缩合并、CSS代码压缩合并、雪碧图)</li><li>静态资源缓存(资源名称加 MD5 戳)</li><li>使用 CDN 加载</li></ul><h3 id="优化页面渲染" tabindex="-1">优化页面渲染 <a class="header-anchor" href="#优化页面渲染" aria-label="Permalink to &quot;优化页面渲染&quot;">​</a></h3><ul><li><code>CSS</code> 放前面， <code>JS</code> 放后面</li><li>懒加载（图片懒加载、触底刷新等）</li><li>减少 <code>DOM</code> 查询， 对 <code>DOM</code> 查询做缓存</li><li>减少 <code>DOM</code> 操作，多个操作尽量合并在一起执行 (DocumentFragment)</li><li>事件节流</li><li>使用 <code>SSR</code> 后端渲染，数据直接输出到 <code>HTML</code> 中，减少浏览器使用 <code>JS</code> 模板渲染页面 <code>HTML</code> 的时间</li></ul><h3 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h3><p>我们可以利用浏览器处于空闲时，预先加载之后会使用到的页面的元素（比如：图片、js、css），之后页面再使用这些元素时会优先从缓存中读取。预加载分为这两种形式： - <code>无条件预加载(Unconditional)</code>：页面一旦加载完成就去下载额外的元素，而这个元素并不一定在这个页面上被使用，比如 Google 首页加载了一张背景图，这是为了搜索结果页所准备的。 - <code>条件预加载(Conditional)</code>：这是基于用户行为做出下一步猜测而去加载元素，比如当你输入文字时会根据文字去下载不同元素。</p><h3 id="多域名分发内容" tabindex="-1">多域名分发内容 <a class="header-anchor" href="#多域名分发内容" aria-label="Permalink to &quot;多域名分发内容&quot;">​</a></h3><p>使用多域名分发内容可以增加浏览器并行下载数，由于 DNS 解析也要耗时， 一般 2-4 个域名 比较合适。比如你可以把 HTML 或 JSP、PHP等文档文件放在 <code>www.example.com</code> 这个域名上，而把静态文件放在 <code>static1.example.com</code> 或者 <code>static.example.com</code> 二级域名上。</p><h3 id="减少-iframe-的使用" tabindex="-1">减少 iframe 的使用 <a class="header-anchor" href="#减少-iframe-的使用" aria-label="Permalink to &quot;减少 iframe 的使用&quot;">​</a></h3><p><code>iframe</code> 可以让 HTML 文档嵌套在另一个 HTML 文档内，想要更好的使用它们就必须知道它们的工作原理。</p><p><code>iframe</code> 优点：</p><ul><li>延迟加载广告等第三方内容</li><li>提供安全沙箱</li><li>并行下载脚本</li></ul><p><code>iframe</code> 缺点</p><ul><li>代价昂贵</li><li>阻止父级页面的加载</li><li>非语义化</li></ul><h3 id="减少cookie" tabindex="-1">减少Cookie <a class="header-anchor" href="#减少cookie" aria-label="Permalink to &quot;减少Cookie&quot;">​</a></h3><p>Cookie 常常被用在身份验证或者存储个人信息，它会通过 HTTP 头信息再服务端和浏览器之间传输，为了减少 HTTP 响应时间，我们有必要减小 <code>Cookie</code>。</p><p>通常有以下几个方法：</p><ul><li>清除不必要的 <code>Cookie</code></li><li>尽量减小 <code>Cookie</code> 内容的长度</li><li>在适当的域中设置 <code>Cookie</code>，保证其他子域不受影响</li><li>设定合适的 <code>Cookie</code> 的过期时间</li></ul><h3 id="减少-dom-操作" tabindex="-1">减少 DOM 操作 <a class="header-anchor" href="#减少-dom-操作" aria-label="Permalink to &quot;减少 DOM 操作&quot;">​</a></h3><p>频繁用 JS 操作 DOM 的开销很大，我们可以通过以下几种方式减少这种开销：</p><ul><li>缓存获取到的 DOM 元素</li><li>批量处理元素，一次性更新到文档</li><li>尽量避免用 JS 改变页面布局</li></ul>',33),c=[d];function r(t,n,h,u,s,m){return i(),a("div",null,c)}const _=e(l,[["render",r]]);export{p as __pageData,_ as default};
