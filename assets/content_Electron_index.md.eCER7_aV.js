import{_ as s,c as e,o as a,a2 as i}from"./chunks/framework.DwDoyBw8.js";const g=JSON.parse('{"title":"Electron","description":"","frontmatter":{},"headers":[],"relativePath":"content/Electron/index.md","filePath":"content/Electron/index.md"}'),t={name:"content/Electron/index.md"},n=i(`<h1 id="electron" tabindex="-1">Electron <a class="header-anchor" href="#electron" aria-label="Permalink to &quot;Electron&quot;">​</a></h1><p><code>Electron</code> 是一个使用 <code>js</code>, <code>html</code> 和 <code>css</code> 等 <code>web</code> 技术创建原生桌面应用的框架， 基于 <code>chromium</code> 和 <code>nodejs</code>，构建的应用可以在 <code>Mac</code>，<code>Windows</code> 和 <code>Linux</code> 三个平台上运行。</p><h2 id="学习资源" tabindex="-1">学习资源 <a class="header-anchor" href="#学习资源" aria-label="Permalink to &quot;学习资源&quot;">​</a></h2><p><a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="noreferrer">Awesome Electron</a></p><h2 id="开发指南" tabindex="-1">开发指南 <a class="header-anchor" href="#开发指南" aria-label="Permalink to &quot;开发指南&quot;">​</a></h2><h3 id="vue-electron" tabindex="-1">Vue + Electron <a class="header-anchor" href="#vue-electron" aria-label="Permalink to &quot;Vue + Electron&quot;">​</a></h3><p><strong>利用 Vue Cli 创建 vue 项目</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  yarn global add @vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vue create my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron</span></span></code></pre></div><p><strong>添加 Electron 构建</strong></p><p>如果你可以建一个网站，你就可以建一个桌面应用程序。 <code>Electron</code> 负责将 <code>web</code> 构建成原生桌面应用。</p><p>而将 <code>Vue.js</code> 应用构建成 <code>Electron</code> 应用，现在用 <code>Vue CLI Plugin Electron Builder</code> 即可。</p><p>首先，指明下 <code>node</code> 版本：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  yarn add @types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cd my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vue add electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder</span></span></code></pre></div><p>详细创建过程 <a href="https://mp.weixin.qq.com/s/U0wqvLV5ZTcJUx-CmRrCgQ" target="_blank" rel="noreferrer">如何使用Vue + Electron 搭建跨平台应用</a></p><h3 id="react-electron" tabindex="-1">React + Electron <a class="header-anchor" href="#react-electron" aria-label="Permalink to &quot;React + Electron&quot;">​</a></h3><p><strong>利用 create-react-app 脚手架创建一个 <code>React</code> 项目</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  npx create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">react</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron</span></span></code></pre></div><p><strong>引入 Electron</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  npm i electron </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><p><strong>打包</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  npm install electron</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">packager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><p><strong>开发脚手架</strong><a href="https://github.com/ConardLi/electron-react" target="_blank" rel="noreferrer">About electron + react + react-router + mobx + webpack 搭建的脚手架工程</a></p>`,22),l=[n];function h(p,r,o,c,d,k){return a(),e("div",null,l)}const u=s(t,[["render",h]]);export{g as __pageData,u as default};
